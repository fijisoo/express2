{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"0e53dd23264e6f73919afdf8aed1dd64.map","sourcesContent":["// var sass = require('node-sass');\r\n// sass.render({\r\n//     file: '/path/to/myFile.scss',\r\n//     data: 'body{background:blue; a{color:black;}}',\r\n//     importer: function(url, prev, done) {\r\n//         // url is the path in import as is, which LibSass encountered.\r\n//         // prev is the previously resolved path.\r\n//         // done is an optional callback, either consume it or return value synchronously.\r\n//         // this.options contains this options hash, this.callback contains the node-style callback\r\n//         someAsyncFunction(url, prev, function(result){\r\n//             done({\r\n//                 file: result.path, // only one of them is required, see section Special Behaviours.\r\n//                 contents: result.data\r\n//             });\r\n//         });\r\n//         // OR\r\n//         var result = someSyncFunction(url, prev);\r\n//         return {file: result.path, contents: result.data};\r\n//     },\r\n//     includePaths: [ 'lib/', 'mod/' ],\r\n//     outputStyle: 'compressed'\r\n// }, function(error, result) { // node-style callback from v3.0.0 onwards\r\n//     if (error) {\r\n//         console.log(error.status); // used to be \"code\" in v2x and below\r\n//         console.log(error.column);\r\n//         console.log(error.message);\r\n//         console.log(error.line);\r\n//     }\r\n//     else {\r\n//         console.log(result.css.toString());\r\n//\r\n//         console.log(result.stats);\r\n//\r\n//         console.log(result.map.toString());\r\n//         // or better\r\n//         console.log(JSON.stringify(result.map)); // note, JSON.stringify accepts Buffer too\r\n//     }\r\n// });\r\n// // OR\r\n// var result = sass.renderSync({\r\n//     file: '/path/to/file.scss',\r\n//     data: 'body{background:blue; a{color:black;}}',\r\n//     outputStyle: 'compressed',\r\n//     outFile: '/to/my/output.css',\r\n//     sourceMap: true, // or an absolute or relative (to outFile) path\r\n//     importer: function(url, prev, done) {\r\n//         // url is the path in import as is, which LibSass encountered.\r\n//         // prev is the previously resolved path.\r\n//         // done is an optional callback, either consume it or return value synchronously.\r\n//         // this.options contains this options hash\r\n//         someAsyncFunction(url, prev, function(result){\r\n//             done({\r\n//                 file: result.path, // only one of them is required, see section Special Behaviours.\r\n//                 contents: result.data\r\n//             });\r\n//         });\r\n//         // OR\r\n//         var result = someSyncFunction(url, prev);\r\n//         return {file: result.path, contents: result.data};\r\n//     }\r\n// }));\r\n//\r\n// console.log(result.css);\r\n// console.log(result.map);\r\n// console.log(result.stats);"]}