{"dependencies":[{"name":"C:\\Users\\BRITENET\\WebstormProjects\\untitled\\package.json","includedInParent":true,"mtime":1521644615725},{"name":"C:\\Users\\BRITENET\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\public-encrypt\\package.json","includedInParent":true,"mtime":1521625482644}],"generated":{"js":"module.exports = function xor(a, b) {\n  var len = a.length;\n  var i = -1;\n  while (++i < len) {\n    a[i] ^= b[i];\n  }\n  return a\n};","map":{"mappings":[{"source":"..\\..\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\public-encrypt\\xor.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"..\\..\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\public-encrypt\\xor.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"..\\..\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\public-encrypt\\xor.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"..\\..\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\public-encrypt\\xor.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"..\\..\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\public-encrypt\\xor.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"..\\..\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\public-encrypt\\xor.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"..\\..\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\public-encrypt\\xor.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"..\\..\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\public-encrypt\\xor.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}}],"sources":{"..\\..\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\public-encrypt\\xor.js":"module.exports = function xor(a, b) {\n  var len = a.length;\n  var i = -1;\n  while (++i < len) {\n    a[i] ^= b[i];\n  }\n  return a\n};"},"lineCount":8}},"hash":"2e106426de4960ebc19687a46c3eb1b1","cacheData":{"env":{}}}